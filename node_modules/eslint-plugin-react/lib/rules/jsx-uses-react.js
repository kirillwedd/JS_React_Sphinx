/**
 * @fileoverview Prevent React to be marked as unused
 * @author Glen Mailer
 */

'use strict';

const pragmaUtil = require('../util/pragma');
const docsUrl = require('../util/docsUrl');
<<<<<<< HEAD
const markVariableAsUsed = require('../util/eslint').markVariableAsUsed;
=======
>>>>>>> 0bb6641 (FavoriteWindow FavoriteButtom)

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

<<<<<<< HEAD
/** @type {import('eslint').Rule.RuleModule} */
=======
>>>>>>> 0bb6641 (FavoriteWindow FavoriteButtom)
module.exports = {
  // eslint-disable-next-line eslint-plugin/prefer-message-ids -- https://github.com/not-an-aardvark/eslint-plugin-eslint-plugin/issues/292
  meta: {
    docs: {
      description: 'Disallow React to be incorrectly marked as unused',
      category: 'Best Practices',
      recommended: true,
      url: docsUrl('jsx-uses-react'),
    },
    schema: [],
  },

  create(context) {
    const pragma = pragmaUtil.getFromContext(context);
    const fragment = pragmaUtil.getFragmentFromContext(context);

<<<<<<< HEAD
    /**
     * @param {ASTNode} node
     * @returns {void}
     */
    function handleOpeningElement(node) {
      markVariableAsUsed(pragma, node, context);
=======
    function handleOpeningElement() {
      context.markVariableAsUsed(pragma);
>>>>>>> 0bb6641 (FavoriteWindow FavoriteButtom)
    }
    // --------------------------------------------------------------------------
    // Public
    // --------------------------------------------------------------------------

    return {
      JSXOpeningElement: handleOpeningElement,
      JSXOpeningFragment: handleOpeningElement,
<<<<<<< HEAD
      JSXFragment(node) {
        markVariableAsUsed(fragment, node, context);
=======
      JSXFragment() {
        context.markVariableAsUsed(fragment);
>>>>>>> 0bb6641 (FavoriteWindow FavoriteButtom)
      },
    };
  },
};
